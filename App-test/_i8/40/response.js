var res = {'data':'HTTP/1.1 200 OK\x0aDate: Sun, 01 Aug 2021 15:10:25 GMT\x0aServer: WSGIServer/0.2 CPython/3.9.2\x0aContent-Type: application/javascript\x0aContent-Length: 7153\x0aContent-Disposition: inline; filename=\x22jquery.bootstrap.modal.forms.js\x22\x0aLast-Modified: Sat, 31 Jul 2021 15:53:04 GMT\x0a\x0a/*\x0adjango-bootstrap-modal-forms\x0aversion : 2.2.0\x0aCopyright (c) 2021 Uros Trstenjak\x0ahttps://github.com/trco/django-bootstrap-modal-forms\x0a*/\x0a\x0a(function ($) {\x0a\x0a    // Open modal & load the form at formURL to the modalContent element\x0a    var modalForm = function (settings) {\x0a        $(settings.modalID).find(settings.modalContent).load(settings.formURL, function () {\x0a            $(settings.modalID).modal(\x22show\x22);\x0a            $(settings.modalForm).attr(\x22action\x22, settings.formURL);\x0a            addEventHandlers(settings);\x0a        });\x0a    };\x0a\x0a    var addEventHandlers = function (settings) {\x0a        $(settings.modalForm).on(\x22submit\x22, function (event) {\x0a            if (event.originalEvent !== undefined && settings.isDeleteForm === false) {\x0a                event.preventDefault();\x0a                isFormValid(settings, submitForm);\x0a                return false;\x0a            }\x0a        });\x0a        // Modal close handler\x0a        $(settings.modalID).on(\x22hidden.bs.modal\x22, function (event) {\x0a            $(settings.modalForm).remove();\x0a        });\x0a    };\x0a\x0a    // Check if form.is_valid() & either show errors or submit it via callback\x0a    var isFormValid = function (settings, callback) {\x0a        $.ajax({\x0a            type: $(settings.modalForm).attr(\x22method\x22),\x0a            url: $(settings.modalForm).attr(\x22action\x22),\x0a            data: new FormData($(settings.modalForm)[0]),\x0a            contentType: false,\x0a            processData: false,\x0a            beforeSend: function () {\x0a                $(settings.submitBtn).prop(\x22disabled\x22, true);\x0a            },\x0a            success: function (response) {\x0a                if ($(response).find(settings.errorClass).length \x3e 0) {\x0a                    // Form is not valid, update it with errors\x0a                    $(settings.modalID).find(settings.modalContent).html(response);\x0a                    $(settings.modalForm).attr(\x22action\x22, settings.formURL);\x0a                    // Reinstantiate handlers\x0a                    addEventHandlers(settings);\x0a                } else {\x0a                    // Form is valid, submit it\x0a                    callback(settings);\x0a                }\x0a            }\x0a        });\x0a    };\x0a\x0a    // Submit form callback function\x0a    var submitForm = function (settings) {        \x0a        if (!settings.asyncUpdate) {\x0a            $(settings.modalForm).submit();\x0a        } else {          \x0a            var asyncSettingsValid = validateAsyncSettings(settings.asyncSettings);\x0a            \x0a            if (asyncSettingsValid) {                \x0a                var asyncSettings = settings.asyncSettings;\x0a                // Serialize form data\x0a                var formdata = new FormData($(settings.modalForm)[0]);\x0a                // Add asyncUpdate and check for it in save method of CreateUpdateAjaxMixin\x0a                formdata.append(\x22asyncUpdate\x22, \x22True\x22);\x0a                \x0a                $.ajax({\x0a                    type: $(settings.modalForm).attr(\x22method\x22),\x0a                    url: $(settings.modalForm).attr(\x22action\x22),\x0a                    data: formdata,\x0a                    contentType: false,\x0a                    processData: false,\x0a                    success: function (response) {\x0a                        var body = $(\x22body\x22);\x0a                        if (body.length === 0) {\x0a                            console.error(\x22django-bootstrap-modal-forms: \x3cbody\x3e element missing in your html.\x22);\x0a                        }\x0a                        body.prepend(asyncSettings.successMessage);\x0a    \x0a                        // Update page without refresh\x0a                        $.ajax({\x0a                            type: \x22GET\x22,\x0a                            url: asyncSettings.dataUrl,\x0a                            dataType: \x22json\x22,\x0a                            success: function (response) {\x0a                                // Update page\x0a                                $(asyncSettings.dataElementId).html(response[asyncSettings.dataKey]);\x0a    \x0a                                // Add modalForm to trigger element after async page update\x0a                                if (asyncSettings.addModalFormFunction) {\x0a                                    asyncSettings.addModalFormFunction();\x0a                                }\x0a    \x0a                                if (asyncSettings.closeOnSubmit) {\x0a                                    $(settings.modalID).modal(\x22hide\x22);\x0a                                } else {\x0a                                    // Reload form\x0a                                    $(settings.modalID).find(settings.modalContent).load(settings.formURL, function () {\x0a                                        $(settings.modalForm).attr(\x22action\x22, settings.formURL);\x0a                                        addEventHandlers(settings);\x0a                                    });\x0a                                }\x0a                            }\x0a                        });\x0a                    }\x0a                });\x0a            }\x0a        }\x0a    };\x0a\x0a    var validateAsyncSettings = function (settings) {\x0a        var missingSettings = [];\x0a\x0a        if (!settings.successMessage) {\x0a            missingSettings.push(\x22successMessage\x22);\x0a            console.error(\x22django-bootstrap-modal-forms: \x27successMessage\x27 in asyncSettings is missing.\x22);\x0a        }        \x0a        if (!settings.dataUrl) {\x0a            missingSettings.push(\x22dataUrl\x22);\x0a            console.error(\x22django-bootstrap-modal-forms: \x27dataUrl\x27 in asyncSettings is missing.\x22);\x0a        }\x0a        if (!settings.dataElementId) {\x0a            missingSettings.push(\x22dataElementId\x22);\x0a            console.error(\x22django-bootstrap-modal-forms: \x27dataElementId\x27 in asyncSettings is missing.\x22);\x0a        }\x0a        if (!settings.dataKey) {\x0a            missingSettings.push(\x22dataKey\x22);\x0a            console.error(\x22django-bootstrap-modal-forms: \x27dataKey\x27 in asyncSettings is missing.\x22);\x0a        }\x0a        if (!settings.addModalFormFunction) {\x0a            missingSettings.push(\x22addModalFormFunction\x22);\x0a            console.error(\x22django-bootstrap-modal-forms: \x27addModalFormFunction\x27 in asyncSettings is missing.\x22);\x0a        }\x0a\x0a        if (missingSettings.length \x3e 0) {\x0a            return false;\x0a        }\x0a\x0a        return true;\x0a    };\x0a\x0a    $.fn.modalForm = function (options) {\x0a        // Default settings\x0a        var defaults = {\x0a            modalID: \x22#modal\x22,\x0a            modalContent: \x22.modal-content\x22,\x0a            modalForm: \x22.modal-content form\x22,\x0a            formURL: null,\x0a            isDeleteForm: false,\x0a            errorClass: \x22.invalid\x22,\x0a            asyncUpdate: false,\x0a            asyncSettings: {\x0a                closeOnSubmit: false,\x0a                successMessage: null,\x0a                dataUrl: null,\x0a                dataElementId: null,\x0a                dataKey: null,\x0a                addModalFormFunction: null\x0a            }\x0a        };\x0a\x0a        // Extend default settings with provided options\x0a        var settings = $.extend(defaults, options);\x0a\x0a        this.each(function () {\x0a            // Add click event handler to the element with attached modalForm\x0a            $(this).click(function (event) {\x0a                // Instantiate new form in modal\x0a                modalForm(settings);\x0a            });\x0a        });\x0a\x0a        return this;\x0a    };\x0a\x0a}(jQuery));'}